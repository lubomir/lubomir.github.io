<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>lsedlar</title>
    <link href="https://lubomir.github.io/en/posts.atom" rel="self" />
    <link href="https://lubomir.github.io" />
    <id>https://lubomir.github.io/en/posts.atom</id>
    <author>
        <name>Lubomír Sedlář</name>
        <email>lubomir.sedlar@gmail.com</email>
    </author>
    <updated>2016-12-12T17:44:21Z</updated>
    <entry>
    <title>Today I Learned: Handling source tarballs</title>
    <link href="https://lubomir.github.io/en/2016-12-12-til-working-with-sources.html" />
    <id>https://lubomir.github.io/en/2016-12-12-til-working-with-sources.html</id>
    <published>2016-12-12T00:00:00Z</published>
    <updated>2016-12-12T17:44:21Z</updated>
    <summary type="html"><![CDATA[<p>Fedora packages are generally built from tarballs provided by upstream developers. What's actually happening to these tarballs and how do they move around?</p>
<h2 id="how-are-sources-uploaded">How are sources uploaded?</h2>
<p>When a new tarball is supposed to be used, the packager will upload it to lookaside cache (because storing big binary files directly in git is bad). This is done with <code>fedpkg upload</code> or <code>fedpkg new-sources</code>. These commands make a <code>POST</code> request to a CGI script running on the dist-git server. This requests includes the name of the file, a checksum and the actual file contents.</p>
<p>Up until today (Dec 12) MD5 hash has been used. Now it's SHA512.</p>
<p>There are actually two requests each time an upload is requested: the first one is to check if a file with the same name and hash has been uploaded already. If it is, there's no point doing it again.</p>
<h2 id="how-does-fedpkg-download-them">How does <a href="https://pagure.io/fedpkg">fedpkg</a> download them?</h2>
<p>Downloading back to development machine is done by <code>fedpkg sources</code>. It reads the <code>sources</code> file in the git repository and requests the files from lookaside cache. The URL for the files contains both filename and the hash.</p>
<p>Once the file is downloaded, the hash is verified to make sure we got the file we asked for.</p>
<h2 id="how-does-koji-download-them">How does Koji download them?</h2>
<p>When a build is submitted to Koji, an SCM URL has to be specified. It needs to point to commit you want to build. Koji will not allow you to build from arbitrary locations though. There is a whitelist of allowed systems.</p>
<p>Once the spec and list of sources are downloaded, the actual source code needs to be retrieved as well. Unless configuration specifies otherwise, Koji would run <code>make sources</code>. For Fedora dist-git, the command is unsurprisingly configured to be <code>fedpkg sources</code>.</p>
<p>However, since this command needs to run the buildroot and <code>fedpkg</code> has a relatively big dependency footprint, the <code>fedpkg</code> command in buildroots is provided by <a href="https://pagure.io/fedpkg-minimal">fedpkg-minimal</a> package. This package contains a single executable shell script that parses the <code>sources</code> file, downloads everything and verifies the hashes.</p>]]></summary>
</entry>
<entry>
    <title>Clickable Pungi logs</title>
    <link href="https://lubomir.github.io/en/2016-09-25-clickable-pungi-logs.html" />
    <id>https://lubomir.github.io/en/2016-09-25-clickable-pungi-logs.html</id>
    <published>2016-09-25T00:00:00Z</published>
    <updated>2016-12-12T11:50:41Z</updated>
    <summary type="html"><![CDATA[<p>When debugging problems with composes, the logs left behind by all stages of the compose run are tremendously helpful. However, they are rather difficult to read due to the sheer volume. Being exposed to them quite intensively for close to a year helps, but it still is a nasty chore.</p>
<p>The most accessible way to look at the logs is via a web browser on <a href="https://kojipkgs.fedoraproject.org/compose/rawhide/">kojipkgs</a>. It's just <em>httpd</em> displaying the raw log files on the disk.</p>
<p>It took me too long to figure out this could be made much more pleasant that copy-pasting stuff from the wall of text.</p>
<p>How about a user script that would run in <a href="http://www.greasespot.net/">Greasemonkey</a> and allow clicking through to different log files or even Koji tasks?</p>
<figure>
<img src="/images/kojipkgs-screenshot.png" alt="Is this not better?" /><figcaption>Is this not better?</figcaption>
</figure>
<p>Turns out it's not that difficult.</p>
<p>Did you know that when Firefox displays a <code>text/plain</code> file, it internally creates an HTML document with all the content in one <code>&lt;pre&gt;</code> tag.</p>
<p>The whole script essentially just runs a search and replace operation on the whole page. We can have a bunch of functions that take the whole content as text and return it slightly modified.</p>
<p>First step will make URLs clickable.</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">function</span> <span class="at">link_urls</span>(str) <span class="op">{</span>
  <span class="kw">let</span> pat <span class="op">=</span> <span class="ss">/https</span><span class="sc">?</span><span class="ss">:</span><span class="sc">\/\/(</span><span class="ss">www</span><span class="sc">\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&amp;//=]*)</span><span class="ss">/g</span><span class="op">;</span>
  <span class="cf">return</span> <span class="va">str</span>.<span class="at">replace</span>(pat<span class="op">,</span> <span class="st">&#39;&lt;a href=&quot;$&amp;&quot;&gt;$&amp;&lt;/a&gt;&#39;</span>)<span class="op">;</span>
<span class="op">}</span></code></pre></div>
<p>I didn't write the crazy regular expression myself. I got from <a href="http://stackoverflow.com/a/3809435/1576064">Stack Overflow</a>.</p>
<p>Next step can make paths to other files in the same compose clickable.</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">function</span> <span class="at">link_local_files</span>(url<span class="op">,</span> pathname<span class="op">,</span> mount<span class="op">,</span> str) <span class="op">{</span>
  <span class="kw">let</span> pat <span class="op">=</span> <span class="kw">new</span> <span class="at">RegExp</span>(mount <span class="op">+</span> pathname <span class="op">+</span> <span class="st">&#39;(/[^ ,&quot;</span><span class="sc">\n</span><span class="st">]+)&#39;</span><span class="op">,</span> <span class="st">&#39;g&#39;</span>)<span class="op">;</span>
  <span class="cf">return</span> <span class="va">str</span>.<span class="at">replace</span>(pat<span class="op">,</span> <span class="kw">function</span> (path<span class="op">,</span> file) <span class="op">{</span>
    <span class="cf">return</span> <span class="st">&#39;&lt;a href=&quot;&#39;</span> <span class="op">+</span> url <span class="op">+</span> file <span class="op">+</span> <span class="st">&#39;&quot;&gt;&#39;</span> <span class="op">+</span> path <span class="op">+</span> <span class="st">&#39;&lt;/a&gt;&#39;</span><span class="op">;</span>
  <span class="op">}</span>)<span class="op">;</span>
<span class="op">}</span></code></pre></div>
<p>The last thing left is not particularly general: linking Koji tasks identifiers.</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">function</span> <span class="at">link_tasks</span>(taskinfo<span class="op">,</span> str) <span class="op">{</span>
  <span class="cf">return</span> <span class="va">str</span>.<span class="at">replace</span>(<span class="st">&#39;\d{8,}/m&#39;</span><span class="op">,</span> <span class="st">&#39;&lt;a href=&quot;&#39;</span> <span class="op">+</span> taskinfo <span class="op">+</span> <span class="st">&#39;$&amp;&quot;&gt;$&amp;&lt;/a&gt;&#39;</span>)
            .<span class="at">replace</span>(<span class="ss">/</span><span class="sc">(</span><span class="ss">Runroot task failed</span><span class="sc">|</span><span class="ss">&#39;task_id&#39;</span><span class="sc">)</span><span class="ss">: </span><span class="sc">(\d{8,})</span><span class="ss">/g</span><span class="op">,</span>
                     <span class="st">&#39;$1: &lt;a href=&quot;&#39;</span> <span class="op">+</span> taskinfo <span class="op">+</span> <span class="st">&#39;$2&quot;&gt;$2&lt;/a&gt;&#39;</span>)<span class="op">;</span>
  <span class="op">}</span>
}</code></pre></div>
<p>Tying all these steps together and passing in the extra arguments is rather trivial but not very generic.</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="va">window</span>.<span class="at">onload</span> <span class="op">=</span> <span class="kw">function</span> () <span class="op">{</span>
  <span class="kw">let</span> origin <span class="op">=</span> <span class="va">window</span>.<span class="va">location</span>.<span class="at">origin</span><span class="op">;</span>
  <span class="kw">let</span> pathname <span class="op">=</span> <span class="va">window</span>.<span class="va">location</span>.<span class="va">pathname</span>.<span class="at">split</span>(<span class="st">&#39;/&#39;</span><span class="op">,</span> <span class="dv">4</span>).<span class="at">join</span>(<span class="st">&#39;/&#39;</span>)<span class="op">;</span>
  <span class="kw">let</span> url <span class="op">=</span> origin <span class="op">+</span> pathname<span class="op">;</span>
  <span class="kw">let</span> taskinfo <span class="op">=</span> <span class="st">&#39;https://koji.fedoraproject.org/koji/taskinfo?taskID=&#39;</span><span class="op">;</span>
  <span class="kw">let</span> mount <span class="op">=</span> <span class="st">&#39;/mnt/koji&#39;</span><span class="op">;</span>

  <span class="kw">var</span> content <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementsByTagName</span>(<span class="st">&#39;pre&#39;</span>)[<span class="dv">0</span>]<span class="op">;</span>
  <span class="kw">var</span> text <span class="op">=</span> <span class="va">content</span>.<span class="at">innerHTML</span><span class="op">;</span>
  <span class="va">content</span>.<span class="at">innerHTML</span> <span class="op">=</span> <span class="at">link_local_files</span>(
    url<span class="op">,</span> pathname<span class="op">,</span> mount<span class="op">,</span>
    <span class="at">link_tasks</span>(taskinfo<span class="op">,</span> <span class="at">link_urls</span>(text))
  )<span class="op">;</span>
<span class="op">}</span></code></pre></div>
<p>If you find this useful, feel free to grab <a href="/data/clickable-kojipkgs.user.js">the whole script with a header</a>.</p>]]></summary>
</entry>
<entry>
    <title>Introducing entr</title>
    <link href="https://lubomir.github.io/en/2016-09-05-introducing-entr.html" />
    <id>https://lubomir.github.io/en/2016-09-05-introducing-entr.html</id>
    <published>2016-09-05T00:00:00Z</published>
    <updated>2016-09-05T19:25:37Z</updated>
    <summary type="html"><![CDATA[<p>When writing code, my workflow is usually to make edits and re-run the test suite (that is, if there is one). This is actually a lot of work that I don't want to do.</p>
<p>Thankfully, it's quite easy to automate. All we need is a utility that would watch files for change and then run the tests.</p>
<p>On Linux, we can somewhat get by with <em>inotifywait</em>, but it is rather tedious. There must be a better way; and there actually is.</p>
<p>Well, the future is here and its name is <a href="http://entrproject.org">entr</a>. It runs arbitrary commands when files change. The list of files to monitor is provided on standard input.</p>
<p>It turned out that I most often want to watch all relevant files in current directory. Therefore, I created a small wrapper that will find all interesting files in current directory and pass them to <code>entr</code>. I call it <code>guard</code>.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/bin/sh</span>
<span class="kw">set</span> <span class="kw">-o</span> pipefail
<span class="kw">ag</span> -g <span class="st">&#39;&#39;</span> <span class="kw">|</span> <span class="kw">entr</span> <span class="st">&quot;</span><span class="ot">$@</span><span class="st">&quot;</span></code></pre></div>
<p>Using <code>git ls-files</code> would work almost as well as <a href="https://github.com/ggreer/the_silver_searcher">the silver searcher</a>. Using <code>find</code> would work as well if you're inclined that way.</p>
<h2 id="go-get-it">Go get it!</h2>
<p>If you want to try it out and automate your workflow a bit, there is now a Fedora package, currently in waiting in Bodhi to be pushed stable (for <a href="https://bodhi.fedoraproject.org/updates/FEDORA-2016-6daf0bfef2">F23</a>, <a href="https://bodhi.fedoraproject.org/updates/FEDORA-2016-b80a4445c2">F24</a>, <a href="https://bodhi.fedoraproject.org/updates/FEDORA-2016-207ac2f3e3">F25</a> and <a href="https://bodhi.fedoraproject.org/updates/FEDORA-EPEL-2016-0ca521c93f">EPEL 7</a>). Feel free to get it from <code>updates-testing</code> repository.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">sudo</span> dnf install entr --enablerepo=updates-testing</code></pre></div>
<p>Many thanks to Igor Gnatenko for review and packaging suggestions.</p>]]></summary>
</entry>
<entry>
    <title>Using fedmsg to send more fedmsg</title>
    <link href="https://lubomir.github.io/en/2016-08-26-moar-messages.html" />
    <id>https://lubomir.github.io/en/2016-08-26-moar-messages.html</id>
    <published>2016-08-26T00:00:00Z</published>
    <updated>2016-08-26T17:41:49Z</updated>
    <summary type="html"><![CDATA[<p>Fedmsg is a perfect system for automating things. I mostly use it to integrate <a href="https://pagure.io/">Pagure</a> with <a href="http://jenkins.fedorainfracloud.org/">Jenkins</a>, which works rather well.</p>
<p>One hiccup is that when a pull request is updated (by pushing more commits to the branch or rebasing it), Pagure will not notice that until someone visits the pull request page. At that point a comment with the notice is generated and the message sent.</p>
<p>My first instinct to automate this was to use a git hook. It's easy to automate hitting each pull request page.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">curl</span> -s https://pagure.io/api/0/pungi/pull-requests <span class="kw">|</span> <span class="kw">\</span>
    <span class="kw">jq</span> <span class="st">&#39;.requests[] | select(.user.name == &quot;lsedlar&quot;) | .id&#39;</span> <span class="kw">|</span> <span class="kw">\</span>
    <span class="kw">while</span> <span class="kw">read</span> <span class="ot">PR_ID</span>; <span class="kw">do</span>
        <span class="kw">echo</span> <span class="st">&quot;https://pagure.io/pungi/pull-request/</span><span class="ot">$PR_ID</span><span class="st">&quot;</span>
        <span class="kw">curl</span> -s <span class="st">&quot;https://pagure.io/pungi/pull-request/</span><span class="ot">$PR_ID</span><span class="st">&quot;</span> <span class="kw">&gt;</span>/dev/null
    <span class="kw">done</span></code></pre></div>
<p>However, there <a href="http://stackoverflow.com/a/9038644/1576064">is no <code>post-push</code> hook</a>, so one would have to run the script manually. That's too much work.</p>
<h2 id="fedmsg-to-the-rescue">Fedmsg to the rescue</h2>
<p>How about getting notified about the push from the server? Pagure will send a message announcing a push immediately.</p>
<p>What we need is a very simple consumer that waits for pushes, finds where the pull requests would likely be going to, tries to find one from this branch and hits the web page.</p>
<p>If the push is to a fork, we can assume the pull request would be filed against the original repo. If it's not a fork, then the pull request would probably be against the same repo.</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">BASE_URL <span class="op">=</span> <span class="st">&#39;https://pagure.io&#39;</span>


<span class="kw">class</span> Poker(fedmsg.consumers.FedmsgConsumer):
    topic <span class="op">=</span> [<span class="st">&#39;io.pagure.prod.pagure.git.receive&#39;</span>]
    config_key <span class="op">=</span> <span class="st">&#39;poker.enabled&#39;</span>

    <span class="kw">def</span> consume(<span class="va">self</span>, msg):
        msg <span class="op">=</span> msg[<span class="st">&#39;body&#39;</span>][<span class="st">&#39;msg&#39;</span>]
        branch <span class="op">=</span> msg[<span class="st">&#39;branch&#39;</span>].split(<span class="st">&#39;/&#39;</span>)[<span class="op">-</span><span class="dv">1</span>]
        repo <span class="op">=</span> msg[<span class="st">&#39;repo&#39;</span>][<span class="st">&#39;name&#39;</span>]
        <span class="cf">if</span> msg[<span class="st">&#39;repo&#39;</span>][<span class="st">&#39;parent&#39;</span>]:
            repo <span class="op">=</span> msg[<span class="st">&#39;repo&#39;</span>][<span class="st">&#39;parent&#39;</span>][<span class="st">&#39;name&#39;</span>]

        url <span class="op">=</span> <span class="st">&#39;</span><span class="sc">%s</span><span class="st">/api/0/</span><span class="sc">%s</span><span class="st">/pull-requests&#39;</span> <span class="op">%</span> (BASE_URL, repo)
        response <span class="op">=</span> requests.get(url)
        <span class="cf">if</span> response.status_code <span class="op">!=</span> <span class="dv">200</span>:
            <span class="va">self</span>.log.warning(<span class="st">&#39;Failed to get </span><span class="sc">%s</span><span class="st"> ...&#39;</span>, url)
            <span class="cf">return</span>

        <span class="cf">for</span> pr <span class="op">in</span> response.json()[<span class="st">&#39;requests&#39;</span>]:
            <span class="cf">if</span> pr[<span class="st">&#39;repo_from&#39;</span>][<span class="st">&#39;id&#39;</span>] <span class="op">!=</span> msg[<span class="st">&#39;repo&#39;</span>][<span class="st">&#39;id&#39;</span>]:
                <span class="cf">continue</span>
            <span class="cf">if</span> pr[<span class="st">&#39;branch_from&#39;</span>] <span class="op">!=</span> branch:
                <span class="cf">continue</span>
            url <span class="op">=</span> <span class="st">&#39;</span><span class="sc">%s</span><span class="st">/</span><span class="sc">%s</span><span class="st">/pull-request/</span><span class="sc">%s</span><span class="st">&#39;</span> <span class="op">%</span> (BASE_URL, repo, pr[<span class="st">&#39;id&#39;</span>])
            <span class="va">self</span>.log.info(<span class="st">&#39;Poking </span><span class="sc">%s</span><span class="st">&#39;</span>, url)
            requests.get(url)
            <span class="cf">return</span></code></pre></div>
<p>A file with this class should be installed with <code>setup.py</code> somewhere under <code>site-packages</code>. For <code>fedmgs-hub</code> to pick the consumer up, there must be a special section in the <code>setup()</code> function call:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">entry_points<span class="op">=</span><span class="st">&quot;&quot;&quot;</span>
<span class="st">[moksha.consumer]</span>
<span class="st">pokeapagure = poke_a_pagure:Poker</span>
<span class="st">&quot;&quot;&quot;</span></code></pre></div>
<p>The name on the left of the equals sign does not really matter. The string on the right should be a package name and a class name of the consumer. In this case the file will be <code>poke_a_pagure/__init__.py</code>.</p>
<h2 id="how-to-make-it-work">How to make it work</h2>
<p>This consumer will run as part of <code>fedmsg-hub</code> (provided in similarly named package). All that is needed to get it working is to install the hub and the python package with the class.</p>
<p>There also needs to be a config file in <code>/etc/fedmsg.d/poke_a_pagure.py</code>. The name is completely arbitrary, nothing depends on it.</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">config <span class="op">=</span> {
    <span class="st">&#39;poker.enabled&#39;</span>: <span class="va">True</span>
}</code></pre></div>
<p>Note the matching config key with the consumer above. There can be more configuration, such as custom rules for logging.</p>
<p>Once that exists, just restart the hub and observe its logs. It will tell you which consumers were loaded.</p>
<p>It's this easy to write a consumer of messages. Now, would it be easier to fix Pagure to send the message immediately? Maybe. But is working with fedmsg fun? Definitely!</p>]]></summary>
</entry>
<entry>
    <title>What's my next badge?</title>
    <link href="https://lubomir.github.io/en/2016-08-20-my-next-badge.html" />
    <id>https://lubomir.github.io/en/2016-08-20-my-next-badge.html</id>
    <published>2016-08-20T00:00:00Z</published>
    <updated>2016-08-20T12:12:11Z</updated>
    <summary type="html"><![CDATA[<p>I love <a href="http://badges.fedoraproject.org/">Fedora Badges</a>. I'm not saying all I do is to get more badges, but it's a great motivator. One thing that somewhat miss a guidance on what options I have, what should I do to get another badge, how much activity will it need.</p>
<p>Fedora Project is not the only community that awards badges to its members. For example Stack Overflow has badges as well. In you Stack Overflow profile you can see which badge you are likely going to get next and how much progress you have made on that.</p>
<figure>
<img src="/images/so-badges.png" alt="Badges on Stack Overflow" /><figcaption>Badges on Stack Overflow</figcaption>
</figure>
<p>Is it possible to do something like this for Fedora badges? Turns out it kind-of is. There actually is [a related issue] filed for the awesome <a href="https://pagure.io/fedora-hubs">Fedora Hubs project</a> to show options of next badges.</p>
<p>All this actually relies on having information about <a href="https://github.com/fedora-infra/tahrir/issues/343">badge paths</a>, but until it's available in production, it can be reasonably hacked based on badge name and a short list of exceptions.</p>
<h2 id="baby-steps">Baby steps</h2>
<p>First thing that comes to mind is to simply look at statistics of the badges. The ones that are awarded more often are most likely the easiest to get. Let's start from that by finding the 5 most common badges that I don't have yet.</p>
<p>However, just taking that is not a particularly good suggestion: in my case 3 out of these badges turn out to be &quot;have FAS account for at least X years&quot;. I'm slowly getting there, but there's not much I can do to speed this up. It makes sense to only show the first badge from each series.</p>
<p style="text-align: center">
<a href="https://badges.fedoraproject.org/badge/dont-call-it-a-comeback" title="Don't Call it a Comeback – You reactivated your Fedora account"><img width=128 src="https://badges.fedoraproject.org/pngs/dont-call-it-a-comeback.png" alt="dont-call-it-a-comeback icon"></a> <a href="https://badges.fedoraproject.org/badge/egg" title="Egg – You've had a FAS account for over one year"><img width=128 src="https://badges.fedoraproject.org/pngs/fas-account-egg.png" alt="egg icon"></a> <a href="https://badges.fedoraproject.org/badge/curious-penguin-ask-fedora-i" title="Curious Penguin (Ask Fedora I) – You had your first interaction with the Ask Fedora forum system."><img width=128 src="https://badges.fedoraproject.org/pngs/askbot-curious-penguin-01.png" alt="curious-penguin-ask-fedora-i icon"></a> <a href="https://badges.fedoraproject.org/badge/crypto-panda" title="Crypto Panda – You updated your GPG key with the Fedora Account System (FAS)"><img width=128 src="https://badges.fedoraproject.org/pngs/fas-crypto-panda.png" alt="crypto-panda icon"></a> <a href="https://badges.fedoraproject.org/badge/speak-up!" title="Speak Up! – Participated in an IRC meeting."><img width=128 src="https://badges.fedoraproject.org/pngs/irc-speak-up.png" alt="speak-up! icon"></a>
</p>
<h2 id="progress-towards-next-badge">Progress towards next badge</h2>
<p>Before we can estimate progress on getting a badge, it is important to understand how the badges are awarded. The system is based on the messaging bus<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>. The <a href="https://github.com/fedora-infra/fedbadges">fedbadges</a> service listens to the bus and every time it sees a message, it checks it against the rules it has defined.</p>
<p>The process starts with a simple check on the message content to make sure that the message is connected to some badge. If it is, more complex checks are performed. These checks either communicate with <a href="https://admin.fedoraproject.org/pkgdb/">pkgdb</a> or <a href="https://github.com/fedora-infra/datanommer">datanommer</a>, the service that archives old messages.</p>
<p>Now obviously I'm not keen on reimplementing the whole rule engine. Fortunately, it is possible to reuse the code from <a href="https://github.com/fedora-infra/fedbadges">fedbadges</a>. All badges that I care about for this part only need the datanommer integration, so that is a big help.</p>
<p>The biggest issue I faced with this is the fact that <a href="https://github.com/fedora-infra/fedbadges">fedbadges</a> connects directly to <a href="https://github.com/fedora-infra/datanommer">datanommer</a>'s database. I can't do that. My workaround was to write a script that would download all messages related to me from <a href="https://apps.fedoraproject.org/datagrepper/">datagrepper</a> and store them locally. This works reasonably well for me personally, but trying to get the messages for someone who is active for a longer time is going to be an issue.</p>
<p>Unfortunately, the list of messages related to a particular user is not enough for all badges: <a href="https://bodhi.fedoraproject.org/">Bodhi</a> has badges for other people voting on your updates. Therefore we also need all messages related to updates a person creates.</p>
<div style="text-align: center; margin-bottom: 1em">
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/senior-badger-badger-ii" title="Senior Badger (Badger II) – You got (about) 50 Fedora Badges.  Way to go!" style="display: block"><img src="https://badges.fedoraproject.org/pngs/badger-02.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 94.0%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
47 / 50
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/chocolate-chip-cookie-ii" title="Chocolate Chip (Cookie II) – Ten people think you're great, because they've given you cookies. Yummy!" style="display: block"><img src="https://badges.fedoraproject.org/pngs/chocolatechipcookie.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 80.0%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
8 / 10
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/bloggin-it!-planet-iii" title="Bloggin' it! (Planet III) – You posted 10 or more things to the Fedora Planet!" style="display: block"><img src="https://badges.fedoraproject.org/pngs/planet-bloggin-it-03.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 60.0%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
6 / 10
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/catching-the-bull-tester-iv" title="Catching the Bull (Tester IV) – *(a great struggle, repeated escapes, discipline required)* Tested and added karma to 20 updates-testing updates in Bodhi. " style="display: block"><img src="https://badges.fedoraproject.org/pngs/tester-04.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 55.0%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
11 / 20
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/what-goes-around-comes-around-karma-iii" title="What goes around comes around (Karma III) – You have received 50 or more good karma on your bodhi updates" style="display: block"><img src="https://badges.fedoraproject.org/pngs/what-goes-around-comes-around-50.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 50.0%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
25 / 50
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/building-the-outer-ring-copr-build-vii" title="Building the Outer Ring (Copr Build VII) – Successfully completed 999 copr builds" style="display: block"><img src="https://badges.fedoraproject.org/pngs/copr-build-999.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 43.8438438438%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
438 / 999
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/what-goes-up...-koji-failure-ii" title="What goes up... (Koji Failure II) – Submitted 5 or more koji builds that failed to build." style="display: block"><img src="https://badges.fedoraproject.org/pngs/koji-what-goes-up-02.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 40.0%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
2 / 5
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/you-can-call-me-patches-scm-iv" title="You can call me &quot;Patches&quot; (SCM IV) – Pushed 400 commits to a Fedora package repository." style="display: block"><img src="https://badges.fedoraproject.org/pngs/you-can-call-me-patches-04.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 36.5%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
146 / 400
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/if-you-build-it...-koji-success-iv" title="If you build it... (Koji Success IV) – Succesfully completed 250 koji builds." style="display: block"><img src="https://badges.fedoraproject.org/pngs/koji-if-you-build-it-04.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 34.8%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
87 / 250
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/is-this-thing-on-updates-testing-iii" title="Is this thing on? (Updates-Testing III) – Pushed 100 bodhi updates to the testing repositories." style="display: block"><img src="https://badges.fedoraproject.org/pngs/is-this-thing-on-03.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 34.0%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
34 / 100
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/like-a-rock-updates-stable-iii" title="Like a Rock (Updates-Stable III) – Pushed 100 bodhi updates to the stable repositories." style="display: block"><img src="https://badges.fedoraproject.org/pngs/like-a-rock-03.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 24.0%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
24 / 100
</div>
</div>
</div>
<div style="display: inline-block; text-align: center">
<a href="https://badges.fedoraproject.org/badge/science-kernel-tester-ii" title="Science (Kernel Tester II) – You completed 5 runs of the kernel regression test suite" style="display: block"><img src="https://badges.fedoraproject.org/pngs/kernel_tester_5.png" width="128"></a>
<div style="width: 200px; height: 24px; background: #999; display: inline-block; color: #fff; position: relative;">
<div style="width: 20.0%; height: 100%; background: #3C6EB4; position: absolute;">

</div>
<div style="position: absolute; left: 0; right: 0; text-align:center; line-height: 24px; font-weight: bold;">
1 / 5
</div>
</div>
</div>
</div>
<p>Another problematic badge is the Cookie one: the number of cookies you have get's reset every release cycle, so despite the number 8 above, I actually only have 1 right now.</p>
<h2 id="i-want-it-too">I want it too</h2>
<p>If you want to experiment with this code, I put it on Pagure as <a href="https://pagure.io/my-next-badge">my-next-badge</a>. There are instructions in README. I didn't try to optimize this in any way (yet), so it needs a lot of memory as all the messages must fit there. In my case, it is about 40 MiB. For other people, it might be significantly more. By &quot;more&quot; I mean it can easily be several gigabytes.</p>
<p>If you decide to try this, please note that the script is a hack that may not always be correct. It may try to convince you that you satisfy conditions for some badge even if you don't have it. Take it with a grain of salt.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Well, almost. Some badges are awarded manually. We can ignore that here.<a href="#fnref1">↩</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Git hooks for required sign-off</title>
    <link href="https://lubomir.github.io/en/2016-05-04-signoff-hooks.html" />
    <id>https://lubomir.github.io/en/2016-05-04-signoff-hooks.html</id>
    <published>2016-05-04T00:00:00Z</published>
    <updated>2016-05-04T17:11:49Z</updated>
    <summary type="html"><![CDATA[<p>There are a couple projects out there (<a href="https://pagure.io/rpkg">rpkg</a>, <a href="https://pagure.io/pungi">pungi</a> etc.) that require each commit to have a signed-off-by line. <a href="https://pagure.io/">Pagure</a> even has a setting that will make it impossible to merge commits without it.</p>
<p>As far as I know, it is supposed to indicate that whoever submitted the commit agrees with the <a href="http://developercertificate.org/">Developer Certificate of Origin</a>.</p>
<p>It is easy to add the line to the commit. Git even has a command line option for it: <code>-s</code>.</p>
<p>It is even easier to forget it, though. But thankfully computers are pretty good at being consistent, so I wrote a few git hooks to remind me.</p>
<p>There are <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">a couple client-side hooks</a> available. Originally the goal was to use <code>commit-msg</code> to reject the commit completely. This turned out to be really frustrating: I would write a nice descriptive commit message only to be told <em>“you forgot <code>-s</code>, write it all again”</em>. Not cool.</p>
<p>Instead I modified to hook to still nag me, but allow me to commit none-the-less. After all, during frantic coding it is often useful to be able to make quick commits, often with the message only saying <em>WIP</em>.</p>
<p>The example <code>commit-msg</code> hook included a check for a duplicate sign-off line, but is never a problem for me, so I don't use that.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/bin/sh</span>
<span class="ot">RED=</span><span class="st">&quot;&quot;</span>
<span class="ot">NORMAL=</span><span class="st">&quot;&quot;</span>
<span class="kw">if [</span> <span class="ot">-f</span> ~/.term_colors<span class="kw"> ]</span>; <span class="kw">then</span>
    <span class="kw">.</span> <span class="kw">~/.term_colors</span>
<span class="kw">fi</span>

<span class="kw">if [</span> <span class="st">&quot;1&quot;</span> <span class="ot">!=</span> <span class="st">&quot;</span><span class="ot">$(</span><span class="kw">grep</span> -c <span class="st">&#39;^Signed-off-by: &#39;</span> <span class="st">&quot;</span><span class="ot">$1</span><span class="st">&quot;</span><span class="ot">)</span><span class="st">&quot;</span><span class="kw"> ]</span>; <span class="kw">then</span>
    <span class="kw">printf</span> <span class="kw">&gt;&amp;2</span> <span class="st">&quot;%sMissing Signed-off-by line.%s\n&quot;</span> <span class="st">&quot;</span><span class="ot">$RED</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="ot">$NORMAL</span><span class="st">&quot;</span>
<span class="kw">fi</span></code></pre></div>
<p>The sourced <code>.term_colors</code> file is available in <a href="https://github.com/lubomir/dotfiles/blob/master/term_colors">my dotfiles</a>. It only really contains a bunch of variables definitions with ANSI color sequences.</p>
<p>With this hook I get reminded directly after the commit. To make sure I don't push anything breaking rules there is a <code>pre-push</code> hook. This one actually aborts the push if anything is wrong. It can however be bypassed with <code>--no-verify</code> option.</p>
<p>It is inspired by sample <code>pre-push</code> hook that rejects pushing commits whose summary starts with <em>WIP</em>.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/bin/bash</span>

<span class="co"># shellcheck disable=2034</span>
<span class="ot">remote=</span><span class="st">&quot;</span><span class="ot">$1</span><span class="st">&quot;</span>
<span class="co"># shellcheck disable=2034</span>
<span class="ot">url=</span><span class="st">&quot;</span><span class="ot">$2</span><span class="st">&quot;</span>

<span class="ot">z40=</span>0000000000000000000000000000000000000000

<span class="co"># shellcheck disable=2034</span>
<span class="kw">while</span> <span class="kw">read</span> <span class="ot">local_ref</span> <span class="ot">local_sha</span> <span class="ot">remote_ref</span> <span class="ot">remote_sha</span>
<span class="kw">do</span>
    <span class="kw">if [</span> <span class="st">&quot;</span><span class="ot">$remote_ref</span><span class="st">&quot;</span> <span class="ot">=</span> <span class="st">&quot;refs/heads/master&quot;</span><span class="kw"> ]</span>
    <span class="kw">then</span>
        <span class="co"># Any push to master is ok</span>
        <span class="kw">continue</span>
    <span class="kw">fi</span>

    <span class="kw">if [</span> <span class="st">&quot;</span><span class="ot">$local_sha</span><span class="st">&quot;</span> <span class="ot">=</span> <span class="ot">$z40</span><span class="kw"> ]</span>
    <span class="kw">then</span>
        <span class="co"># Branch is deleted, nothing to check here, move along.</span>
        <span class="kw">:</span>
    <span class="kw">else</span>
        <span class="kw">if [</span> <span class="st">&quot;</span><span class="ot">$remote_sha</span><span class="st">&quot;</span> <span class="ot">=</span> <span class="ot">$z40</span><span class="kw"> ]</span>
        <span class="kw">then</span>
            <span class="co"># New branch, examine all commits</span>
            <span class="ot">range=</span><span class="st">&quot;</span><span class="ot">$local_sha</span><span class="st">&quot;</span>
        <span class="kw">else</span>
            <span class="co"># Update to existing branch, examine new commits</span>
            <span class="ot">range=</span><span class="st">&quot;</span><span class="ot">$remote_sha</span><span class="st">..</span><span class="ot">$local_sha</span><span class="st">&quot;</span>
        <span class="kw">fi</span>

        <span class="co"># Check for WIP commit</span>
        <span class="ot">commit=$(</span><span class="kw">git</span> rev-list -n 1 --grep <span class="st">&#39;^WIP&#39;</span> <span class="st">&quot;</span><span class="ot">$range</span><span class="st">&quot;</span><span class="ot">)</span>
        <span class="kw">if [</span> <span class="ot">-n</span> <span class="st">&quot;</span><span class="ot">$commit</span><span class="st">&quot;</span><span class="kw"> ]</span>
        <span class="kw">then</span>
            <span class="kw">echo</span> <span class="kw">&gt;&amp;2</span> <span class="st">&quot;Found WIP commit in </span><span class="ot">$local_ref</span><span class="st">, not pushing&quot;</span>
            <span class="kw">exit</span> 1
        <span class="kw">fi</span>

        <span class="co"># Check for commits without sign-off</span>
        <span class="kw">if [</span> <span class="st">&quot;</span><span class="ot">$remote_sha</span><span class="st">&quot;</span> <span class="ot">=</span> <span class="ot">$z40</span><span class="kw"> ]</span>; <span class="kw">then</span>
            <span class="co"># New branch is pushed, we only want to check commits that are not</span>
            <span class="co"># on master.</span>
            <span class="ot">range=</span><span class="st">&quot;</span><span class="ot">$(</span><span class="kw">git</span> merge-base master <span class="st">&quot;</span><span class="ot">$local_sha</span><span class="st">&quot;</span><span class="ot">)</span><span class="st">..</span><span class="ot">$local_sha</span><span class="st">&quot;</span>
        <span class="kw">fi</span>
        <span class="kw">while</span> <span class="kw">read</span> <span class="ot">ref</span>; <span class="kw">do</span>
            <span class="ot">msg=$(</span><span class="kw">git</span> log -n 1 --format=%B <span class="st">&quot;</span><span class="ot">$ref</span><span class="st">&quot;</span><span class="ot">)</span>
            <span class="kw">if</span> ! <span class="kw">grep</span> -q <span class="st">&#39;^Signed-off-by: &#39;</span> <span class="kw">&lt;&lt;&lt;</span><span class="st">&quot;</span><span class="ot">$msg</span><span class="st">&quot;</span><span class="kw">;</span> <span class="kw">then</span>
                <span class="kw">echo</span> <span class="kw">&gt;&amp;2</span> <span class="st">&quot;Unsigned commit </span><span class="ot">$ref</span><span class="st">&quot;</span>
                <span class="kw">exit</span> 1
            <span class="kw">fi</span>
        <span class="kw">done</span> <span class="kw">&lt;</span> <span class="kw">&lt;(git</span> rev-list <span class="st">&quot;</span><span class="ot">$range</span><span class="st">&quot;</span><span class="kw">)</span>
        <span class="co"># The process substitution above is a hack to make sure loop runs in</span>
        <span class="co"># the same shell and can actually exit the whole script.</span>
    <span class="kw">fi</span>
<span class="kw">done</span>

<span class="kw">exit</span> 0</code></pre></div>]]></summary>
</entry>
<entry>
    <title>Slightly Richer Man's CI</title>
    <link href="https://lubomir.github.io/en/2016-04-26-slightly-richer-man-ci.html" />
    <id>https://lubomir.github.io/en/2016-04-26-slightly-richer-man-ci.html</id>
    <published>2016-04-26T00:00:00Z</published>
    <updated>2016-04-27T10:13:24Z</updated>
    <summary type="html"><![CDATA[<p>Not so long ago I have written about <a href="/en/2016-03-08-poor-man-ci.html">my attempts to bring CI to Pagure</a>. It was pointed out to me that a couple assumptions I've made are actually incorrect.</p>
<p>Here are the errata:</p>
<ul>
<li><p>When a pull request is updated or rebased, there is no need to check the message body. <a href="https://pagure.io/">Pagure</a> already puts this information into the message (look for <code>notification: true</code>).</p></li>
<li><p>Using comments for indicating status is too clumsy, especially given the fact there is a feature designed to communicate exactly this type of information – flags. Setting a flag is pretty much the same as posting a comment, but they appear in a sidebar with a link and some text. You can also add a percentage to it that will determine the color of a badge.</p></li>
<li><p>The <em>Fedmsg</em> hook that you can enable in the project settings is actually not required. I misunderstood what it does. The notifications on new pull requests get send automatically without any change in configuration required.</p>
<p>The hook is actually git <code>post-receive</code> hook that will send you <del>tons of</del> e-mail through the <a href="https://apps.fedoraproject.org/notifications">Fedora notification</a> system whenever a commit is pushed to master without going through a pull-request.</p>
<p>UPDATE: Since Pagure 2.0 the hook will send only one e-mail on each push.</p></li>
</ul>
<p>Anyway, fixing these is quite simple.</p>
<p>While the setup described in previous post worked fine for my use case, it was not ideal. One of the biggest issues is the configuration: adding stuff to <code>/etc</code> is not a scalable model. First order of business was to create a web interface where the configuration could be managed. Added benefit: with a decent authentication system (yes, FAS does nicely) it's possible for anyone to configure their integration points.</p>
<figure>
<img src="/images/poormanci/index.png" alt="Screenshot of index page" /><figcaption>Screenshot of index page</figcaption>
</figure>
<h2 id="jenkins-wants-a-voice-too">Jenkins wants a voice too</h2>
<p>Another big drawback is the dependency on Fedora Infrastructure Jenkins. While setting up your own Jenkins is easy (approx. three clicks on <a href="https://www.openshift.com/">OpenShift</a>), connecting it to production <em>Fedmsg</em> is probably not (I don't know, did not try).</p>
<p>Since there is now a web server for the interface, it is not a big step to support web hooks. There is a <a href="https://wiki.jenkins-ci.org/display/JENKINS/Notification+Plugin">Notification plugin</a> for Jenkins that can ping a URL with JSON data whenever a job finishes.</p>
<p>The real message contains a ton of data, but for this use-case only project name and build number are really interesting. As long as this data is supplied, we are happy.</p>
<div class="sourceCode"><pre class="sourceCode json"><code class="sourceCode json"><span class="fu">{</span>
    <span class="dt">&quot;name&quot;</span><span class="fu">:</span> <span class="st">&quot;asgard&quot;</span><span class="fu">,</span>
    <span class="dt">&quot;build&quot;</span><span class="fu">:</span> <span class="fu">{</span>
        <span class="dt">&quot;number&quot;</span><span class="fu">:</span> <span class="dv">1</span><span class="fu">,</span>
    <span class="fu">}</span>
<span class="fu">}</span></code></pre></div>
<p>If instead of web requests the plugin gives you stack traces, try setting log lines to 1.</p>
<figure>
<img src="/images/poormanci/notification.png" alt="Plugin configuration" /><figcaption>Plugin configuration</figcaption>
</figure>
<p>(No, that is not an actual token in the shown URL. No need to try.)</p>
<h2 id="here-we-are-and-there-we-go">Here we are and there we go</h2>
<p>The semi-finished service is available at <a href="http://poormanci.lsedlar.cz/" class="uri">http://poormanci.lsedlar.cz/</a>. The documentation really is lacking, though. The best guide how to use it is <a href="/en/2016-03-08-poor-man-ci.html">the previous blog post</a> or <a href="http://poormanci.lsedlar.cz/help">a somewhat work-in-progress help page</a>.</p>
<p>Now there is still a ton of things to improve. Currently, all requests to external services are sent directly from the fedmsg consumer or web app process. Since these are blocking and could potentially take a long time, it's a prime candidate for denial-of-service. I need to refactor this into a separate worker process.</p>
<p>Another thing to add would be the support for a web hook sent from Pagure. This would make it possible to use a custom instance. First I need to learn what data is actually sent in the HTTP request.</p>
<p>UPDATE: This is actually <a href="https://docs.pagure.org/pagure/usage/using_webhooks.html">documented</a> and the hook contains the same information that the Fedmsg notification has.</p>
<p>Another point of improvement is the deployment of the whole thing. Currently, I build everything <a href="https://copr.fedorainfracloud.org/coprs/lsedlar/poor-man-ci/">in COPR</a>, install the RPM and do any database migrations almost by hand. The initial setup was also manual. I plan to write an Ansible playbook to make future deployments simpler. It will also document the process a bit.</p>
<p>Next item on the list is support for multi-configuration projects in Jenkins. The Matrix plugin in Jenkins allows a single test suite to run on multiple builders (e.g. with different Python versions). I want to support such configuration too, but the <em>Fedmsg</em> integration will not do here. <a href="https://apps.fedoraproject.org/datagrepper/id?id=2016-ef190673-90c3-4947-b82f-a909d870d53f&amp;is_raw=true&amp;size=extra-large">The messages</a> from such builds are not particularly helpful. I have reported <a href="https://github.com/fedora-infra/jenkins-fedmsg-emit/issues/3">the issue</a> upstream, but I'm really in no position to go fix the Java code.</p>
<p>The reporting from the notification plugin works well, though.</p>]]></summary>
</entry>
<entry>
    <title>Today I Learned: Exploring Git history</title>
    <link href="https://lubomir.github.io/en/2016-04-20-TIL-exploring-git-history.html" />
    <id>https://lubomir.github.io/en/2016-04-20-TIL-exploring-git-history.html</id>
    <published>2016-04-20T00:00:00Z</published>
    <updated>2016-04-20T16:53:26Z</updated>
    <summary type="html"><![CDATA[<p>For a long time my most favourite way of looking at Git history has been this long command.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">git</span> log --graph --oneline --decorate --all</code></pre></div>
<p>All this while it worked very well, but the one annoyance I noticed is that <code>--all</code> actually displays everything. Admittedly this is expected, but in some cases not really desirable.</p>
<p>In situations when there are multiple remotes configured and one of these remotes has a long-running branch I don't really care about the command would not be helpful at all.</p>
<p>Turns out if I read the man page carefully, I could have avoided the issue by simply using <code>--branches</code> instead of <code>--all</code>. That will only display local branches in the graph.</p>
<p>The commits that get displayed will still have annotations about remote branches that end at that commit, so the context is still there.</p>]]></summary>
</entry>
<entry>
    <title>Today I Learned: Overlapping pull requests in Pagure</title>
    <link href="https://lubomir.github.io/en/2016-04-03-TIL-overlapping-pull-requests.html" />
    <id>https://lubomir.github.io/en/2016-04-03-TIL-overlapping-pull-requests.html</id>
    <published>2016-04-03T00:00:00Z</published>
    <updated>2016-04-03T17:13:29Z</updated>
    <summary type="html"><![CDATA[<p>The other day I was wondering what happens when two pull requests in <a href="https://pagure.io/">Pagure</a> share some commits. So I tested it out and here are the results.</p>
<p>By sharing commits I mean one pull request is based on another. (In the spirit of <code>git log</code>, newest commits on the top.)</p>
<pre><code> * d69de04 (pr2) Extra commit
 * 9657821 (pr1) Shared commit
 /
*  4ec8ad5 (master) Last commit on master</code></pre>
<p>Assuming both pull requests are to be merged, there are two ways to approach this.</p>
<ol type="1">
<li><p>Merge <code>pr1</code> first. The merge happens as usual, and <code>pr2</code> will get a notification comment saying it was rebased. Merging <code>pr2</code> now can still use fast-forward strategy.</p></li>
<li><p>Merge <code>pr2</code> first. Again, there is no problem merging, and in this situation Pagure will say that there are no changes on <code>pr1</code> to be merged, so you can just close this pull request and be done with it.</p></li>
</ol>
<p>Now I don't know if it was designed like this or its just an outcome of the ways things are implemented, but it seems to behave logically. As far as I know this is not documented, so I would not be surprised to see changes.</p>
<p>What happens when one pull request is not just a subset of another, but is a diverging history? In the example, think <code>pr1</code> has also an extra commit not shared with <code>pr2</code>.</p>
<p>No matter which request is merged first, the other will be automatically rebased so that it is only requesting to merge the extra commits. It may or may not create a merge conflict. This really depends on the nature of the actual changes.</p>]]></summary>
</entry>
<entry>
    <title>Today I Learned: Packaging bash-completion files</title>
    <link href="https://lubomir.github.io/en/2016-03-14-TIL-packaging-bash-completion.html" />
    <id>https://lubomir.github.io/en/2016-03-14-TIL-packaging-bash-completion.html</id>
    <published>2016-03-14T00:00:00Z</published>
    <updated>2016-03-14T18:51:31Z</updated>
    <summary type="html"><![CDATA[<p>Today I ran into this kind of problem for the first time: a package I needed to build installed a bash completion file, and the destination for it was determined by <code>pkg-config</code>. Depending on the system, it would most likely end up in <code>/usr/share/bash-completion/completions/</code> or <code>/etc/bash_completion.d/</code>.</p>
<p>How to write the spec file to handle this dichotomy? Turns out it is not that complicated.</p>
<p>Drop this at the top of spec file and then use <code>%{compdir}</code> in the <code>%files</code> section. Solved.</p>
<pre><code>%define compdir %(pkg-config --variable=completionsdir bash-completion)
%if &quot;%{compdir}&quot; == &quot;&quot;
%define compdir &quot;/etc/bash_completion.d&quot;
%endif</code></pre>
<p>The real gotcha is that the <code>%files</code> section must install the parent of this directory, otherwise the builds will fail with error about two files on one line.</p>]]></summary>
</entry>

</feed>
