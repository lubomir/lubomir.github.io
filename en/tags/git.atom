<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>lsedlar – Posts tagged git</title>
    <link href="https://lubomir.github.io//en/tags/git.atom" rel="self" />
    <link href="https://lubomir.github.io/" />
    <id>https://lubomir.github.io//en/tags/git.atom</id>
    <author>
        <name>Lubomír Sedlář</name>
        <email>lubomir.sedlar@gmail.com</email>
    </author>
    <updated>2016-05-04T00:00:00Z</updated>
    <entry>
    <title>Git hooks for required sign-off</title>
    <link href="https://lubomir.github.io//en/2016-05-04-signoff-hooks.html" />
    <id>https://lubomir.github.io//en/2016-05-04-signoff-hooks.html</id>
    <published>2016-05-04T00:00:00Z</published>
    <updated>2016-05-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>There are a couple projects out there (<a href="https://pagure.io/rpkg">rpkg</a>, <a href="https://pagure.io/pungi">pungi</a> etc.) that require each commit to have a signed-off-by line. <a href="https://pagure.io/">Pagure</a> even has a setting that will make it impossible to merge commits without it.</p>
<p>As far as I know, it is supposed to indicate that whoever submitted the commit agrees with the <a href="http://developercertificate.org/">Developer Certificate of Origin</a>.</p>
<p>It is easy to add the line to the commit. Git even has a command line option for it: <code>-s</code>.</p>
<p>It is even easier to forget it, though. But thankfully computers are pretty good at being consistent, so I wrote a few git hooks to remind me.</p>
<p>There are <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">a couple client-side hooks</a> available. Originally the goal was to use <code>commit-msg</code> to reject the commit completely. This turned out to be really frustrating: I would write a nice descriptive commit message only to be told <em>“you forgot <code>-s</code>, write it all again”</em>. Not cool.</p>
<p>Instead I modified to hook to still nag me, but allow me to commit none-the-less. After all, during frantic coding it is often useful to be able to make quick commits, often with the message only saying <em>WIP</em>.</p>
<p>The example <code>commit-msg</code> hook included a check for a duplicate sign-off line, but is never a problem for me, so I don't use that.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/bin/sh</span>
<span class="ot">RED=</span><span class="st">&quot;&quot;</span>
<span class="ot">NORMAL=</span><span class="st">&quot;&quot;</span>
<span class="kw">if [</span> <span class="ot">-f</span> ~/.term_colors<span class="kw"> ]</span>; <span class="kw">then</span>
    <span class="kw">.</span> <span class="kw">~/.term_colors</span>
<span class="kw">fi</span>

<span class="kw">if [</span> <span class="st">&quot;1&quot;</span> <span class="ot">!=</span> <span class="st">&quot;</span><span class="ot">$(</span><span class="kw">grep</span> -c <span class="st">&#39;^Signed-off-by: &#39;</span> <span class="st">&quot;</span><span class="ot">$1</span><span class="st">&quot;</span><span class="ot">)</span><span class="st">&quot;</span><span class="kw"> ]</span>; <span class="kw">then</span>
    <span class="kw">printf</span> <span class="kw">&gt;&amp;2</span> <span class="st">&quot;%sMissing Signed-off-by line.%s\n&quot;</span> <span class="st">&quot;</span><span class="ot">$RED</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="ot">$NORMAL</span><span class="st">&quot;</span>
<span class="kw">fi</span></code></pre></div>
<p>The sourced <code>.term_colors</code> file is available in <a href="https://github.com/lubomir/dotfiles/blob/master/term_colors">my dotfiles</a>. It only really contains a bunch of variables definitions with ANSI color sequences.</p>
<p>With this hook I get reminded directly after the commit. To make sure I don't push anything breaking rules there is a <code>pre-push</code> hook. This one actually aborts the push if anything is wrong. It can however be bypassed with <code>--no-verify</code> option.</p>
<p>It is inspired by sample <code>pre-push</code> hook that rejects pushing commits whose summary starts with <em>WIP</em>.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/bin/bash</span>

<span class="co"># shellcheck disable=2034</span>
<span class="ot">remote=</span><span class="st">&quot;</span><span class="ot">$1</span><span class="st">&quot;</span>
<span class="co"># shellcheck disable=2034</span>
<span class="ot">url=</span><span class="st">&quot;</span><span class="ot">$2</span><span class="st">&quot;</span>

<span class="ot">z40=</span>0000000000000000000000000000000000000000

<span class="co"># shellcheck disable=2034</span>
<span class="kw">while</span> <span class="kw">read</span> <span class="ot">local_ref</span> <span class="ot">local_sha</span> <span class="ot">remote_ref</span> <span class="ot">remote_sha</span>
<span class="kw">do</span>
    <span class="kw">if [</span> <span class="st">&quot;</span><span class="ot">$remote_ref</span><span class="st">&quot;</span> <span class="ot">=</span> <span class="st">&quot;refs/heads/master&quot;</span><span class="kw"> ]</span>
    <span class="kw">then</span>
        <span class="co"># Any push to master is ok</span>
        <span class="kw">continue</span>
    <span class="kw">fi</span>

    <span class="kw">if [</span> <span class="st">&quot;</span><span class="ot">$local_sha</span><span class="st">&quot;</span> <span class="ot">=</span> <span class="ot">$z40</span><span class="kw"> ]</span>
    <span class="kw">then</span>
        <span class="co"># Branch is deleted, nothing to check here, move along.</span>
        <span class="kw">:</span>
    <span class="kw">else</span>
        <span class="kw">if [</span> <span class="st">&quot;</span><span class="ot">$remote_sha</span><span class="st">&quot;</span> <span class="ot">=</span> <span class="ot">$z40</span><span class="kw"> ]</span>
        <span class="kw">then</span>
            <span class="co"># New branch, examine all commits</span>
            <span class="ot">range=</span><span class="st">&quot;</span><span class="ot">$local_sha</span><span class="st">&quot;</span>
        <span class="kw">else</span>
            <span class="co"># Update to existing branch, examine new commits</span>
            <span class="ot">range=</span><span class="st">&quot;</span><span class="ot">$remote_sha</span><span class="st">..</span><span class="ot">$local_sha</span><span class="st">&quot;</span>
        <span class="kw">fi</span>

        <span class="co"># Check for WIP commit</span>
        <span class="ot">commit=$(</span><span class="kw">git</span> rev-list -n 1 --grep <span class="st">&#39;^WIP&#39;</span> <span class="st">&quot;</span><span class="ot">$range</span><span class="st">&quot;</span><span class="ot">)</span>
        <span class="kw">if [</span> <span class="ot">-n</span> <span class="st">&quot;</span><span class="ot">$commit</span><span class="st">&quot;</span><span class="kw"> ]</span>
        <span class="kw">then</span>
            <span class="kw">echo</span> <span class="kw">&gt;&amp;2</span> <span class="st">&quot;Found WIP commit in </span><span class="ot">$local_ref</span><span class="st">, not pushing&quot;</span>
            <span class="kw">exit</span> 1
        <span class="kw">fi</span>

        <span class="co"># Check for commits without sign-off</span>
        <span class="kw">if [</span> <span class="st">&quot;</span><span class="ot">$remote_sha</span><span class="st">&quot;</span> <span class="ot">=</span> <span class="ot">$z40</span><span class="kw"> ]</span>; <span class="kw">then</span>
            <span class="co"># New branch is pushed, we only want to check commits that are not</span>
            <span class="co"># on master.</span>
            <span class="ot">range=</span><span class="st">&quot;</span><span class="ot">$(</span><span class="kw">git</span> merge-base master <span class="st">&quot;</span><span class="ot">$local_sha</span><span class="st">&quot;</span><span class="ot">)</span><span class="st">..</span><span class="ot">$local_sha</span><span class="st">&quot;</span>
        <span class="kw">fi</span>
        <span class="kw">while</span> <span class="kw">read</span> <span class="ot">ref</span>; <span class="kw">do</span>
            <span class="ot">msg=$(</span><span class="kw">git</span> log -n 1 --format=%B <span class="st">&quot;</span><span class="ot">$ref</span><span class="st">&quot;</span><span class="ot">)</span>
            <span class="kw">if</span> ! <span class="kw">grep</span> -q <span class="st">&#39;^Signed-off-by: &#39;</span> <span class="kw">&lt;&lt;&lt;</span><span class="st">&quot;</span><span class="ot">$msg</span><span class="st">&quot;</span><span class="kw">;</span> <span class="kw">then</span>
                <span class="kw">echo</span> <span class="kw">&gt;&amp;2</span> <span class="st">&quot;Unsigned commit </span><span class="ot">$ref</span><span class="st">&quot;</span>
                <span class="kw">exit</span> 1
            <span class="kw">fi</span>
        <span class="kw">done</span> <span class="kw">&lt;</span> <span class="kw">&lt;(git</span> rev-list <span class="st">&quot;</span><span class="ot">$range</span><span class="st">&quot;</span><span class="kw">)</span>
        <span class="co"># The process substitution above is a hack to make sure loop runs in</span>
        <span class="co"># the same shell and can actually exit the whole script.</span>
    <span class="kw">fi</span>
<span class="kw">done</span>

<span class="kw">exit</span> 0</code></pre></div>]]></summary>
</entry>
<entry>
    <title>Today I Learned: Exploring Git history</title>
    <link href="https://lubomir.github.io//en/2016-04-20-TIL-exploring-git-history.html" />
    <id>https://lubomir.github.io//en/2016-04-20-TIL-exploring-git-history.html</id>
    <published>2016-04-20T00:00:00Z</published>
    <updated>2016-04-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>For a long time my most favourite way of looking at Git history has been this long command.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">git</span> log --graph --oneline --decorate --all</code></pre></div>
<p>All this while it worked very well, but the one annoyance I noticed is that <code>--all</code> actually displays everything. Admittedly this is expected, but in some cases not really desirable.</p>
<p>In situations when there are multiple remotes configured and one of these remotes has a long-running branch I don't really care about the command would not be helpful at all.</p>
<p>Turns out if I read the man page carefully, I could have avoided the issue by simply using <code>--branches</code> instead of <code>--all</code>. That will only display local branches in the graph.</p>
<p>The commits that get displayed will still have annotations about remote branches that end at that commit, so the context is still there.</p>]]></summary>
</entry>

</feed>
