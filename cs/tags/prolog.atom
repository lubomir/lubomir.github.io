<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>lsedlar – Příspěvky označené jako prolog</title>
    <link href="https://lubomir.github.io/cs/tags/prolog.atom" rel="self" />
    <link href="https://lubomir.github.io" />
    <id>https://lubomir.github.io/cs/tags/prolog.atom</id>
    <author>
        <name>Lubomír Sedlář</name>
        <email>lubomir.sedlar@gmail.com</email>
    </author>
    <updated>2016-06-26T13:24:29Z</updated>
    <entry>
    <title>Znásilňování SICStus Prologu</title>
    <link href="https://lubomir.github.io/cs/2011-02-26-znasilnovani-sicstus-prologu.html" />
    <id>https://lubomir.github.io/cs/2011-02-26-znasilnovani-sicstus-prologu.html</id>
    <published>2011-02-26T00:00:00Z</published>
    <updated>2016-06-26T13:24:29Z</updated>
    <summary type="html"><![CDATA[<h2 id="použití">Použití</h2>
<p>Při instalaci se do adresáře <code>$PREFIX/bin</code> mimo jiné nainstaluje spustitelný soubor <code>sicstus</code>, což je přímo interpret. Tu stačí spustit a jsem skoro tam, kde jsme chtěli být.</p>
<p>To slovíčko „skoro“ je poměrně důležité. Interpret sice běží, ale zdaleka se nechová tak, aby se dal pohodlně používat. Například kurzor se nedá posunout šipkami doprostřed psaného dotazu a opravit překlep, po ukončení zůstane nezalomený řádek a posunutý prompt, nikde žádná historie dotazů …</p>
<p>Naštěstí to není nezvratný stav. Stačí nainstalovat utilitu <a href="http://utopia.knoware.nl/~hlub/rlwrap/">rlwrap</a> třeba ze standardních repozitářů a potom spouštět <code>rlwrap sicsus</code>. Výsledkem je stejný interpret, ale tentokrát se všemi výhodami knihovny readline, jako třeba funkční šipky nebo historie ukládaná do <code>~/.sicstus_history</code>, ve které se dá interaktivně vyhledávat přes <code>^R</code> nebo jenom šipkou nahoru/dolů. Možná to má někde nějaký háček, ale zatím jsem na nic nepřišel.</p>
<h3 id="někdo-to-rád-barevné">Někdo to rád barevné</h3>
<p>Rlwrap umožňuje pomocí přepínače <code>-p</code> (nebo <code>--promp-colour</code>) obarvit výzvu programu. Menší problém je ale v tom, že za prompt považuje i řádky, kde se vypisuje víc možných unifikací a interpret čeká na středník kvůli další možnosti. Osobně bych preferoval obarvení pouze klasické výzvy <code>| ?-</code> a podobných, které začínají znakem <code>|</code>.</p>
<p>Naštěstí si tohle přání můžu splnit pomocí filtru. Stačí si uložit <a href="/data/prolog_filter">tento filtr</a> ideálně do adresáře <code>/usr/share/rlwrap/filters</code> a potom spouštět pomocí <code>rlwrap -z 'prolog_filter Blue' sicstus</code>. Možnosti barev jsou <code>black</code>, <code>red</code>, <code>green</code>, <code>yellow</code>, <code>blue</code>, <code>purple</code>, <code>cyan</code> a <code>white</code>. Pokud je alespoň první písmeno velké, použije se tučná varianta.</p>
<h4 id="aktualizace-16.3.2011">Aktualizace 16. 3. 2011</h4>
<p>Existuje i výrazně jednodušší řešení. Rlwrap umožňuje přepínači nastavit, které výzvy má „vařit“. Je to přepínač <code>-O regexp</code>, kde potřebný regulární výraz je <code>'^\|'</code>. Potom stačí použít klasicky <code>-pBARVA</code> (stejný výčet jako je výše) a už to funguje.</p>
<p>Taky se může hodit přidat přepínač <code>-g '^.$'</code>, což zakáže ukládání jednopísmenných odpovědí do historie.</p>
<h2 id="vim">Vim</h2>
<p>Vim sám o sobě Prolog moc nepodporuje. Nakopírováním těch <a href="https://github.com/adimit/prolog.vim">správných souborů</a> do <code>~/.vim/</code> se ale změní do celkem použitelné formy: sympaticky zvýrazňuje syntaxi, automaticky odsazuje řádky a sám pozná, kde začínají a končí foldy.</p>
<p>Poslední drobný zádrhel je v tom, že si většinou splete typ souboru s Perlem, který taky používá příponu <code>.pl</code>. Dá se to obejít přidáním modeline na konec souboru:</p>
<div class="sourceCode"><pre class="sourceCode prolog"><code class="sourceCode prolog"><span class="co">% vim: ft=prolog</span></code></pre></div>]]></summary>
</entry>

</feed>
