<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>lsedlar – Příspěvky označené jako regulární výrazy</title>
    <link href="http://lubomir.github.io//cs/tags/regularni-vyrazy.atom" rel="self" />
    <link href="http://lubomir.github.io/" />
    <id>http://lubomir.github.io//cs/tags/regularni-vyrazy.atom</id>
    <author>
        <name>Lubomír Sedlář</name>
        <email>lubomir.sedlar@gmail.com</email>
    </author>
    <updated>2012-03-20T00:00:00Z</updated>
    <entry>
    <title>Derivací k regulárním výrazům</title>
    <link href="http://lubomir.github.io//cs/2012-03-20-derivaci-k-regularnim-vyrazum.html" />
    <id>http://lubomir.github.io//cs/2012-03-20-derivaci-k-regularnim-vyrazum.html</id>
    <published>2012-03-20T00:00:00Z</published>
    <updated>2012-03-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>V předmětu <a href="http://www.fi.muni.cz/~sojka/PV030/">PV030</a> se člověk mimo jiné potká s algoritmy pro práci s regulárními výrazy. Jedním z nich je i metoda konverze regulárního výrazu na konečný automat, a ne nedeterministický s <span class="math"><em>ϵ</em></span>-kroky. Touto metodou je možné rovnou vyrobit minimální deterministický konečný automat. A jak lépe porozumět algoritmu než si ho zkusit naprogramovat?</p>
<p>Podrobnější popis je algoritmu je k dispozici <a href="http://www.fi.muni.cz/~sojka/PV030/2012-03-15.pdf">ve slidech</a>, případně ve článku <a href="http://dl.acm.org/citation.cfm?id=321249"><em>Derivatives of Regular Expressions</em></a>, jehož autorem je <em>Janusz A. Brzozowski</em>.</p>
<figure>
<img src="/images/regex0.png" alt="a^*b+(c+d+e)a" /><figcaption><span class="math"><em>a</em><sup> * </sup><em>b</em> + (<em>c</em> + <em>d</em> + <em>e</em>)<em>a</em></span></figcaption>
</figure>
<h2 id="importujeme">Importujeme</h2>
<p>Budeme potřebovat importovat několik modulů, většinu z nich pro parsování výrazu.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">M</span>
<span class="kw">import qualified</span> <span class="dt">Data.Set</span> <span class="kw">as</span> <span class="dt">S</span>
<span class="kw">import </span><span class="dt">Text.Parsec.Char</span>
<span class="kw">import </span><span class="dt">Text.Parsec.String</span>
<span class="kw">import </span><span class="dt">Text.Parsec.Combinator</span>
<span class="kw">import </span><span class="dt">Text.Parsec.Prim</span>
<span class="kw">import </span><span class="dt">Text.Parsec.Expr</span>
<span class="kw">import </span><span class="dt">Control.Applicative</span> ((&lt;*), (*&gt;))
<span class="kw">import </span><span class="dt">Data.Maybe</span> (fromMaybe)
<span class="kw">import </span><span class="dt">Data.List</span> (tails, foldl&#39;)</code></pre>
<h2 id="datové-typy">Datové typy</h2>
<p>Je potřeba nějak reprezentovat jak samotný regulární výraz, tak i výsledný automat. Regexp je možné reprezentovat jako strom. Listy jsou základní výrazy, uzly potom zřetězení, alternativa a iterace.</p>
<p>Později budeme potřebovat určovat, jestli nějaký regulární výraz popisuje (mimo jiné) prázdné slovo. Pro urychlení tedy u těch konstruktorů, kde to není zřejmé, přidáme tuto informaci.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Regex</span> a <span class="fu">=</span> <span class="dt">Epsilon</span>
             <span class="fu">|</span> <span class="dt">Zero</span>
             <span class="fu">|</span> <span class="dt">Simple</span> a
             <span class="fu">|</span> <span class="dt">Plus</span> <span class="dt">Bool</span> (<span class="dt">Regex</span> a) (<span class="dt">Regex</span> a)
             <span class="fu">|</span> <span class="dt">Conc</span> <span class="dt">Bool</span> (<span class="dt">Regex</span> a) (<span class="dt">Regex</span> a)
             <span class="fu">|</span> <span class="dt">Iter</span> (<span class="dt">Regex</span> a)
             <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>, <span class="dt">Show</span>)</code></pre>
<p>Pro konečný automat bude potřeba další typ. Automat má nějaké přechody, množinu stavů a počáteční stav. Položka <code>isAccepting</code> je funkce, která pro stav řekne, jestli je akceptující.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Node</span> <span class="fu">=</span> <span class="dt">Regex</span> <span class="dt">Char</span>  <span class="co">-- ^ Popisek stavu</span>

<span class="kw">data</span> <span class="dt">FiniteAutomaton</span> <span class="fu">=</span> <span class="dt">FiniteAutomaton</span>
                     {<span class="ot"> transitions ::</span> <span class="dt">M.Map</span> (<span class="dt">Node</span>,<span class="dt">Char</span>) <span class="dt">Node</span>
                     ,<span class="ot"> states      ::</span> <span class="dt">S.Set</span> <span class="dt">Node</span>
                     ,<span class="ot"> startNode   ::</span> <span class="dt">Node</span>
                     ,<span class="ot"> isAccepting ::</span> <span class="dt">Node</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
                     }</code></pre>
<p>V první řadě nadefinujeme tři pomocné funkce pro spojování regexpů, které se postarají o korektní vyplnění pomocné boolovské části a taky zabrání vzniku několika patologických výrazů – např. nemá smysl řetězit něco s prázdným slovem. Jiný příklad je výraz <code>(E*)*</code>, který je ekvivalentní s <code>E*</code> (a navíc vede k zacyklení).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">plus ::</span> <span class="dt">Regex</span> a <span class="ot">-&gt;</span> <span class="dt">Regex</span> a <span class="ot">-&gt;</span> <span class="dt">Regex</span> a
plus <span class="dt">Zero</span> x <span class="fu">=</span> x
plus x <span class="dt">Zero</span> <span class="fu">=</span> x
plus x y    <span class="fu">=</span> <span class="dt">Plus</span> (canBeEpsilon x <span class="fu">||</span> canBeEpsilon y) x y

<span class="ot">conc ::</span> <span class="dt">Regex</span> a <span class="ot">-&gt;</span> <span class="dt">Regex</span> a <span class="ot">-&gt;</span> <span class="dt">Regex</span> a
conc <span class="dt">Epsilon</span> x <span class="fu">=</span> x
conc x <span class="dt">Epsilon</span> <span class="fu">=</span> x
conc <span class="dt">Zero</span> _    <span class="fu">=</span> <span class="dt">Zero</span>
conc _ <span class="dt">Zero</span>    <span class="fu">=</span> <span class="dt">Zero</span>
conc x y       <span class="fu">=</span> <span class="dt">Conc</span> (canBeEpsilon x <span class="fu">&amp;&amp;</span> canBeEpsilon y) x y

<span class="ot">iter ::</span> <span class="dt">Regex</span> a <span class="ot">-&gt;</span> <span class="dt">Regex</span> a
iter (<span class="dt">Iter</span> x) <span class="fu">=</span> <span class="dt">Iter</span> x
iter x        <span class="fu">=</span> <span class="dt">Iter</span> x</code></pre>
<p>Jak jsem psal výše, musíme být schopní pro daný výraz <span class="math"><em>E</em></span> určit, jestli <span class="math"><em>L</em>(<em>E</em>)</span> obsahuje <span class="math"><em>ϵ</em></span>. Vzhledem k tomu, kolikrát se tato funkce bude volat při derivování, by bylo dobré, aby dokázala fungovat v konstantním čase.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">canBeEpsilon ::</span> <span class="dt">Regex</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span>
canBeEpsilon <span class="dt">Epsilon</span>      <span class="fu">=</span> <span class="dt">True</span>
canBeEpsilon <span class="dt">Zero</span>         <span class="fu">=</span> <span class="dt">False</span>
canBeEpsilon (<span class="dt">Simple</span> _)   <span class="fu">=</span> <span class="dt">False</span>
canBeEpsilon (<span class="dt">Conc</span> e _ _) <span class="fu">=</span> e
canBeEpsilon (<span class="dt">Plus</span> e _ _) <span class="fu">=</span> e
canBeEpsilon (<span class="dt">Iter</span> _)     <span class="fu">=</span> <span class="dt">True</span></code></pre>
<h2 id="parsování">Parsování</h2>
<p>A nyní hurá na parsování. <code>Parsec</code> nabízí úžasné možnosti, jak parsovat aritmetické i jiné výrazy. Jediná složitější věc je tady parser pro jednotlivý znak, protože umožňuje využít zpětného lomítka k escapování znaků hvězdičky, plusu a závorek, které by jinak měly speciální význam.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">regexP, termP,<span class="ot"> simpleP ::</span> <span class="dt">Parser</span> (<span class="dt">Regex</span> <span class="dt">Char</span>)
regexP <span class="fu">=</span> buildExpressionParser table termP
termP <span class="fu">=</span> simpleP <span class="fu">&lt;|&gt;</span> char <span class="ch">&#39;(&#39;</span> <span class="fu">*&gt;</span> regexP <span class="fu">&lt;*</span> char <span class="ch">&#39;)&#39;</span>
table <span class="fu">=</span> [ [ <span class="dt">Postfix</span> <span class="fu">$</span> char <span class="ch">&#39;*&#39;</span> <span class="fu">&gt;&gt;</span> return iter ]
        , [<span class="dt">Infix</span> (return conc) <span class="dt">AssocLeft</span>]
        , [<span class="dt">Infix</span> (char <span class="ch">&#39;+&#39;</span> <span class="fu">&gt;&gt;</span> return plus) <span class="dt">AssocLeft</span>]
        ]
simpleP <span class="fu">=</span> <span class="kw">do</span>
    c&#39; <span class="ot">&lt;-</span> noneOf <span class="st">&quot;()+*&quot;</span>
    c <span class="ot">&lt;-</span> <span class="kw">if</span> c&#39; <span class="fu">==</span> <span class="ch">&#39;\\&#39;</span>
            <span class="kw">then</span> anyChar
            <span class="kw">else</span> return c&#39;
    return (<span class="dt">Simple</span> c)</code></pre>
<p>Parser <code>regexP</code> teď můžeme obalit pomocnou funkcí.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fromString ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Regex</span> <span class="dt">Char</span>
fromString str <span class="fu">=</span> <span class="kw">case</span> parse (regexP <span class="fu">&lt;*</span> eof) <span class="st">&quot;&quot;</span> str <span class="kw">of</span>
    <span class="dt">Left</span> _  <span class="ot">-&gt;</span> <span class="dt">Zero</span>
    <span class="dt">Right</span> r <span class="ot">-&gt;</span> r</code></pre>
<h2 id="derivace">Derivace</h2>
<p>Funkce pro derivaci regulárních výrazů je skoro doslovným přepisem definice ze <a href="http://www.fi.muni.cz/~sojka/PV030/2012-03-15.pdf">slidů</a>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">derive ::</span> <span class="dt">Eq</span> a <span class="ot">=&gt;</span> <span class="dt">Regex</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Regex</span> a
derive <span class="dt">Zero</span>    _      <span class="fu">=</span> <span class="dt">Zero</span>
derive <span class="dt">Epsilon</span> _      <span class="fu">=</span> <span class="dt">Zero</span>
derive (<span class="dt">Simple</span> x) y
    <span class="fu">|</span> x <span class="fu">==</span> y          <span class="fu">=</span> <span class="dt">Epsilon</span>
    <span class="fu">|</span> otherwise       <span class="fu">=</span> <span class="dt">Zero</span>
derive (<span class="dt">Plus</span> _ p q) x <span class="fu">=</span> plus (derive p x) (derive q x)
derive (<span class="dt">Conc</span> _ p q) x
    <span class="fu">|</span> canBeEpsilon p  <span class="fu">=</span> plus (conc (derive p x) q) (derive q x)
    <span class="fu">|</span> otherwise       <span class="fu">=</span> conc (derive p x) q
derive (<span class="dt">Iter</span> p) x     <span class="fu">=</span> conc (derive p x) (iter p)</code></pre>
<h2 id="konstrukce-automatu">Konstrukce automatu</h2>
<p>A můžeme budovat automat! Samotný algoritmus běží v cyklu <code>run</code>, v kterém postupně vytvoříme jak množinu stavů, tak tabulku přechodů.</p>
<p>V každé iteraci vezmeme všechny regulární výrazy z fronty <code>q</code> a každý zderivujeme každým písmenem abecedy. Z těchto všech derivací přidáme nové stavy a přechody mezi ty, co už jsme napočítali. Zároveň nově přidané stavy tvoří novou frontu.</p>
<p>Nemá smysl přidávat žádné hrany, které vedou do stavu odpovídajícího regexpu <code>Zero</code>, tím se jenom zbytečně zvětšuje tabulka přechodů.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">toFA ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Regex</span> <span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">FiniteAutomaton</span>
toFA alphabet re <span class="fu">=</span> <span class="dt">FiniteAutomaton</span> { startNode <span class="fu">=</span> re
                                   , transitions <span class="fu">=</span> allTransitions
                                   , states <span class="fu">=</span> allStates
                                   , isAccepting <span class="fu">=</span> canBeEpsilon
                                   }
  <span class="kw">where</span>
    (allStates, allTransitions) <span class="fu">=</span> run (S.singleton re, M.empty) [re]

    run res []  <span class="fu">=</span> res
    run (s,t) q <span class="fu">=</span> run (newStates, newTransitions) newQueue
        <span class="kw">where</span>
            allD           <span class="fu">=</span> [ ((r,a), derive r a) <span class="fu">|</span> r <span class="ot">&lt;-</span> q, a <span class="ot">&lt;-</span> alphabet ]
            derivedStates  <span class="fu">=</span> S.fromList <span class="fu">$</span> map snd allD
            newStates      <span class="fu">=</span> s <span class="ot">`S.union`</span> derivedStates
            newTransitions <span class="fu">=</span> M.union t <span class="fu">$</span> M.fromList <span class="fu">$</span> filter ((<span class="fu">/=</span> <span class="dt">Zero</span>) <span class="fu">.</span> snd) allD
            newQueue       <span class="fu">=</span> S.toList <span class="fu">$</span> S.difference derivedStates s</code></pre>
<h2 id="práce-s-automatem">Práce s automatem</h2>
<p>Když má automat přejít pod nějakým znakem z jednoho stavu do dalšího, podíváme se do tabulky a pokud je přechod nedefinovaný, interpretujeme to jako přechod do stavu <code>Zero</code>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">transition ::</span> <span class="dt">FiniteAutomaton</span> <span class="ot">-&gt;</span> <span class="dt">Node</span> <span class="ot">-&gt;</span> <span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">Node</span>
transition fa q a <span class="fu">=</span> fromMaybe <span class="dt">Zero</span> <span class="fu">$</span> M.lookup (q,a) (transitions fa)</code></pre>
<p>Pro spuštění automatu nad nějakým slovem tedy začneme v počátečním stavu a postupně automat krmíme znaky ze vstupu. Nakonec stačí zkontrolovat, jestli jsme došli do akceptujícího stavu.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">runFA ::</span> <span class="dt">FiniteAutomaton</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
runFA fa str <span class="fu">=</span> isAccepting fa <span class="fu">$</span> foldl&#39; (transition fa) (startNode fa) str</code></pre>
<p>Teď už můžeme zabalit vytváření automatu do jediné funkce.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">strToFA ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FiniteAutomaton</span>
strToFA str <span class="fu">=</span>  toFA (getAlphabet str) <span class="fu">$</span> fromString str
  <span class="kw">where</span>
    getAlphabet <span class="fu">=</span> filter (<span class="ot">`notElem`</span> <span class="st">&quot;()*+&quot;</span>)</code></pre>
<p>Pomocí této funkce můžeme vytvořit jednoduchý operátor, který porovná řetězec s regulárním výrazem <span class="math"><em>E</em></span> a zjistí, jestli dané slovo patří do <span class="math"><em>L</em>(<em>E</em>)</span>.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">(=~) ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
str <span class="fu">=~</span> regex <span class="fu">=</span> runFA (strToFA regex) str</code></pre>
<p>Nalezení všech odpovídajících podřetězců je maličko složitější. Postupně spustíme automat na všechny sufixy řetězce a zapamatujeme si, kde jsme došli do akceptujícího stavu. Zároveň ale zastavíme, když dorazíme do stavu <code>Zero</code>, protože z něj už není úniku.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">allMatches ::</span> <span class="dt">RE</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [(<span class="dt">Int</span>, <span class="dt">Int</span>)]
allMatches re str <span class="fu">=</span> concatMap (uncurry <span class="fu">$</span> run <span class="dv">1</span> (startNode fa)) starts
  <span class="kw">where</span>
    fa <span class="fu">=</span> strToFA re
    starts <span class="fu">=</span> zip [<span class="dv">0</span><span class="fu">..</span>] (tails str)

    run _ _    _ []        <span class="fu">=</span> []
    run _ <span class="dt">Zero</span> _ _         <span class="fu">=</span> []
    run end q start (a<span class="fu">:</span>as) <span class="fu">=</span> <span class="kw">let</span> newQ <span class="fu">=</span> transition fa q a
                             <span class="kw">in</span> <span class="kw">if</span> isAccepting fa newQ
                                    <span class="kw">then</span> (start, end) <span class="fu">:</span> run (end <span class="fu">+</span> <span class="dv">1</span>) newQ start as
                                    <span class="kw">else</span>                run (end <span class="fu">+</span> <span class="dv">1</span>) newQ start as</code></pre>
<h2 id="další-úpravy">Další úpravy</h2>
<p>V tomhle stavu program při výpočtu tráví naprostou většinu času porovnáváním regulárních výrazů. Bylo by pěkné zbavit se jich a místo nich používat pro označování stavů čísla. To už ale dělat nebudu.</p>
<figure>
<img src="/images/regex1.png" alt="tis+ti+iti" /><figcaption>tis+ti+iti</figcaption>
</figure>
<h2 id="aktualizace">Aktualizace</h2>
<dl>
<dt>2012-07-01</dt>
<dd>upraveno tak, aby <code>(E*)*</code> nevedlo k zacyklení; doplněn odkaz na původní článek
</dd>
</dl>]]></summary>
</entry>

</feed>
