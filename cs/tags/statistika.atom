<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>lsedlar – Příspěvky označené jako statistika</title>
    <link href="http://lubomir.github.io//cs/tags/statistika.atom" rel="self" />
    <link href="http://lubomir.github.io/" />
    <id>http://lubomir.github.io//cs/tags/statistika.atom</id>
    <author>
        <name>Lubomír Sedlář</name>
        <email>lsedlar@mail.muni.cz</email>
    </author>
    <updated>2013-04-25T00:00:00Z</updated>
    <entry>
    <title>Popisná statistika v R</title>
    <link href="http://lubomir.github.io//cs/2013-04-25-statistika-v-r.html" />
    <id>http://lubomir.github.io//cs/2013-04-25-statistika-v-r.html</id>
    <published>2013-04-25T00:00:00Z</published>
    <updated>2013-04-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Tento text je výcuc z mých poznatků, které jsem nabyl při vypracování projektu do jistého matematického předmětu.</p>
<h2 id="načítání-dat-a-první-průzkum">Načítání dat a první průzkum</h2>
<p>V první řadě je potřeba načíst soubor s daty. Za předpokladu, že máme data ve formátu CSV, se nám bude hodit příkaz <code>read.csv</code> (jak nečekané…). Taky by bylo dobré zjistit, jak vlastně data vypadají, tedy jaké jsou názvy atributů a jak vypadá prvních pár záznamů.</p>
<pre class="R"><code>&gt; data &lt;- read.csv(&quot;nazev_souboru.csv&quot;)
&gt; names(data)
...
&gt; head(data)
...</code></pre>
<p>Jednotlivé atributy je potom možné adresovat přes notaci se znakem <code>$</code>, tedy třeba <code>data$atr1</code>. Funkce <code>nrow(data)</code> nám prozradí, kolik je v datovém rámci záznamů.</p>
<p>Pro kvalitativní atributy se hodí výpis hodnot s příslušnou četností. To se dá udělat pomocí funkce <code>table</code>. Pokud bychom chtěli relativní četnosti, stačí celou tabulku podělit počtem řádků.</p>
<pre class="R"><code>&gt; table(data$class)

   1    2
 700  300
&gt; table(data$class) / nrow(data)

  1   2
0.7 0.3</code></pre>
<p>Pro atributy s větším počtem hodnot než jenom dvě je možné vygenerovat tabulku kumulativních relativních četností pomocí funkce <code>cumsum()</code>.</p>
<p>Pro vizualizaci kvalitativních atributů se hodí např. sloupkový diagram, který je možné vytvořit pomocí funkce <code>barplot</code> aplikované na tabulku četností (třeba i kumulativních). Jiná možnost je polygon četností – funkce <code>plot</code>, jejíž první argument je tabulka, kterou chceme vizualizovat. Polygon četností navíc vyžaduje argument <code>type=&quot;b&quot;</code>, tedy typ grafu <em>both</em>, což znamená puntíky spojené čarami.</p>
<pre class="R"><code>&gt; barplot(table(data$class))
&gt; plot(table(data$at7), type=&quot;b&quot;)</code></pre>
<p>Další užitečné atributy pro grafy jsou:</p>
<dl>
<dt><code>main</code></dt>
<dd>hlavní titulek umístěný nad grafem <code>xlab</code>, <code>ylab</code>
</dd>
<dd>popisek osy x, resp. osy y <code>col</code>
</dd>
<dd>vektor barev použitý pro graf, případně jedna barva jako řetězec, význam se zřejmě liší pro jednotlivé typy grafu; např. <code>col=c(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;)</code> <code>pch</code>
</dd>
<dd>typ puntíku <code>cex</code>
</dd>
<dd>velikost vykreslovaných puntíků
</dd>
</dl>
<h2 id="kontingenční-tabulky">Kontingenční tabulky</h2>
<p>Závislosti mezi jednotlivými atributy je možné zkoumat třeba pomocí kontingenční tabulky. Tu opět produkuje funkce <code>table</code>, tentokrát se dvěma argumenty. První argument (a tedy datová sada) určuje řádky, druhý argument jsou sloupce.</p>
<p>Z této tabulky je možné dopočítat kontingenční tabulku řádkově (nebo sloupcově) podmíněných četností. Nenašel jsem k tomu ale vestavěnou funkci, takže to bude vyžadovat trochu černé magie.</p>
<p>Pro řádkově podmíněné četnosti stačí každou hodnotu v kontingenční tabulce absolutních četností podělit součtem hodnot na příslušném řádku. Součty po řádcích je možné vyprodukovat pomocí funkce <code>rowSums</code>. Tabulky potom stačí podělit.</p>
<pre class="R"><code>&gt; table(atribut1, atribut2) / rowSums(table(atribut1, atribut2))</code></pre>
<p>Se sloupcově podmíněnými četnosti je to trochu horší. Existuje funkce <code>colSums</code>, která spočítá sumy přes sloupce, jednoduché dělení jako v předchozím případě ale nebude fungovat, protože tabulky si nebudou rozměrově správně odpovídat. Řešením je využít funkci s lakonickým názvem <code>t</code>, která transponuje svůj jediný argument.</p>
<pre class="R"><code>&gt; tab &lt;- table(atribut1, atribut2)
&gt; t(t(tab) / colSums(tab))</code></pre>
<p>Správnost výsledků se dá ověřit například pomocí dalšího volání <code>rowSums</code>, V tabulce řádkově podmíněných četností by měla být suma na každém řádku rovna 1, obdobně pro sloupce pro sloupcově podmíněné četnosti.</p>
<h2 id="generování-histogramů">Generování histogramů</h2>
<p>Základní histogram se dá udělat pomocí funkce <code>hist</code>. Bez nějakých dalších argumentů ale vytvoří nehezkou obludu. Hlavní kámen úrazu této funkce je nastavování počtu intervalů. Pomocí argumenty <code>breaks</code> je sice možné zadat číslo nebo název metody, ale je to jenom doporučení a funkce se tím nemusí přesně řídit. Navíc výchozí nastavení vygeneruje nepříliš přehlednou osu <span class="math"><em>x</em></span>, ze které se těžko odečítají hranice intervalů.</p>
<p>Nicméně můžeme tady využít možnosti definice vlastních funkcí a napsat vlastní vykreslování histogramů. Tato funkce bude očekávat data ve stejném formátu jako standardní <code>hist</code>, počet intervalů, a volitelný popisek osy <span class="math"><em>x</em></span>.</p>
<pre class="R"><code>myhist &lt;- function(data, num_bins, lab=&#39;data&#39;) {
    # Spočítáme šířku intervalu s přesností na jedno desetinné místo
    width &lt;- round((max(data) - min(data)) / num_bins, digits=1)
    # Uděláme vektor bodů, kde začínají a končí intervaly
    breaks &lt;- seq(min(data), min(data) + num_bins * width, by=width)
    # Pro jistotu vypíšeme šířku intervalu na výstup
    cat(&#39;Bin width = &#39;, width, &#39;\n&#39;)

    # Nastavíme okraje
    par(mar=c(6, 4, 1, 2))
    hist(data, breaks=breaks,
        xaxt=&#39;n&#39;,               # Nechceme osu X
        xlab=&#39;&#39;,                # Ani její popisek
        main=&#39;&#39;,                # I hlavní titulek vynecháme
        col=&#39;lightblue&#39;,        # Barva výplně sloupců
        border=&#39;blue&#39;,          # Barva rámečku sloupců
        ylab=&#39;Absolutní četnost&#39;)
    # Přidáme vlastní osu
    axis(1,                     # Kreslíme osu X
        at=breaks,              # Chceme značky na hranicích intervalů
        las=2)                  # Test bude vertikálně, aby se to tam vešlo
    # Vykreslíme popisek pod osou
    mtext(lab, side=1, line=4)  # Číslo u line udává, jak daleko bude text od
                                # grafu

    # Volitelně bychom mohli ještě do rohu přidat informaci o šířce intervalu
    leg &lt;- paste(&#39;Šířka intervalu&#39;, format(width))
    legend(&#39;topright&#39;, leg, box.lty=0)
}</code></pre>
<p>Jako argumenty <code>col</code> a <code>border</code> funkce <code>hist</code> by bylo možné zadat i vektory barev, kdybychom to chtěli oživit. Nechceme.</p>
<p>Velikost fontu se dá ovlivnit parametrem <code>cex</code>. Je potřeba ho zadat u <code>par</code> a <code>mtext</code>.</p>
<figure>
<img src="/images/r-histogram.png" alt="Ukázka vytvořeného histogramu" /><figcaption>Ukázka vytvořeného histogramu</figcaption>
</figure>
<h2 id="korelace-a-regresní-přímka">Korelace a regresní přímka</h2>
<p>Když už máme dva numerické atributy, můžeme mezi nimi hledat hledat nějaké vztahy. Korelační koeficienty se dají počítat funkcí <code>cor(atribut1, atribut2, method=&quot;pearson&quot;)</code>. Další dostupné metody jsou <code>spearman</code> a <code>kendall</code>.</p>
<p>Vypočítat koeficienty regresní přímky lze pomocí funkce <code>lm</code>. Vykreslení do grafu potom provede funkce <code>abline</code> aplikovaná na to, co vrátí <code>lm</code>.</p>
<pre class="R"><code>&gt; lm(loans ~ ages)
...
Coefficients:
(Intercept)         ages
   2982.684        8.118
&gt; abline(lm(loans ~ ages))</code></pre>
<p>Před samotným vykreslením přímky je možné si nachystat třeba tečkový diagram atributů, jejichž závislost hledáme.</p>
<pre class="R"><code>&gt; plot(ages,        # Co bude na ose X
       loans)       # Co bude na ose Y</code></pre>
<h2 id="ukládání-do-souborů">Ukládání do souborů</h2>
<p>Uložení vytvořeného grafu do souboru je vlastně naprosto triviální. Před voláním vykreslovacích funkcí je potřeba přesměrovat výstup do požadovaného souboru pomocí funkce, jejíž název určí formát výstupu a jediný argument název výstupního souboru. Dostupné jsou minimálně <code>pdf</code> a <code>png</code>. Až je dokresleno, zavolání <code>dev.off()</code> zase přesměruje výstup na obrazovku.</p>
<h2 id="další-užitečné-funkce">Další užitečné funkce</h2>
<ul>
<li>Funkce <code>source</code> jako argument očekává jméno souboru a chová se jako stejnojmenný příkaz v Bashi.</li>
<li>Zaokrouhlení hodnot na určitý počet desetinných míst se dá provést pomocí <code>round(x, digits=N)</code>, kde <code>x</code> může být číslo nebo klidně i tabulka.</li>
<li>Pokud před název funkce napíšeme otazník, dostaneme poměrně podrobnou nápovědu. Např. <code>?table</code>.</li>
</ul>
<h2 id="odkazy">Odkazy</h2>
<ul>
<li><a href="http://www.r-tutor.com/elementary-statistics">Pěkný úvod do popisné statistiky v R</a></li>
</ul>]]></summary>
</entry>

</feed>
